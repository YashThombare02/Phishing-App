import React, { useState, useEffect } from 'react';
import Layout from '@/components/Layout';
import { getStatistics, getSearchHistory } from '@/utils/api';
import Loading from '@/components/Loading';
import { FaChartBar, FaExclamationTriangle, FaGlobe, FaSearch, FaTable, FaFilter, FaCalendarAlt, FaShieldAlt, FaLock, FaUnlock, FaLink, FaCheckCircle } from 'react-icons/fa';

interface Statistics {
  total_urls_analyzed: number;
  phishing_percentage: number;
  legitimate_percentage: number;
  total_phishing: number;
  total_legitimate: number;
  common_tlds: Record<string, number>;
  recent_detections: {
    url: string;
    is_phishing: boolean;
    timestamp: string;
  }[];
}

interface SearchRecord {
  id: number;
  url: string;
  is_phishing: boolean;
  timestamp: string;
  score?: number;
  report?: {
    reasons: string[];
    features?: any;
    detailedAnalysis?: any;
  };
}

const StatisticsPage: React.FC = () => {
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [stats, setStats] = useState<Statistics | null>(null);
  const [searchHistory, setSearchHistory] = useState<SearchRecord[]>([]);
  const [historyLoading, setHistoryLoading] = useState<boolean>(true);
  const [historyError, setHistoryError] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [totalPages, setTotalPages] = useState<number>(1);
  const [filter, setFilter] = useState<string>('all'); // 'all', 'phishing', 'safe'
  const [selectedRecord, setSelectedRecord] = useState<SearchRecord | null>(null);
  const [showReportModal, setShowReportModal] = useState<boolean>(false);
  
  const recordsPerPage = 10;

  // Function to fetch the latest statistics
  const fetchLatestStatistics = async () => {
    try {
      setLoading(true);
      const data = await getStatistics();
      
      // Initialize with defaults if data fields are missing
      const processedData: Statistics = {
        total_urls_analyzed: data.total_urls_analyzed || 0,
        phishing_percentage: data.phishing_percentage || 0,
        legitimate_percentage: data.legitimate_percentage || 0,
        total_phishing: data.total_phishing || 0,
        total_legitimate: data.total_legitimate || 0,
        common_tlds: data.common_tlds || {},
        recent_detections: data.recent_detections || []
      };
      
      setStats(processedData);
      setError(null);
    } catch (err: any) {
      console.error('Statistics API error:', err);
      setError('Could not fetch live statistics. Please check if the backend API is running.');
    } finally {
      setLoading(false);
    }
  };

  // Set up auto-refresh every 30 seconds
  useEffect(() => {
    const refreshInterval = setInterval(() => {
      fetchLatestStatistics();
    }, 30000); // 30 seconds

    // Clean up interval on component unmount
    return () => clearInterval(refreshInterval);
  }, []);

  useEffect(() => {
    fetchLatestStatistics();
  }, [searchHistory]); // Refetch when search history changes

  useEffect(() => {
    const fetchSearchHistory = async () => {
      setHistoryLoading(true);
      try {
        // Call the backend API
        const data = await getSearchHistory(currentPage, recordsPerPage, filter);
        
        setSearchHistory(data.records);
        setTotalPages(data.total_pages);
        
        // Refresh statistics after new search history is loaded
        fetchLatestStatistics();
        
        setHistoryError(null);
      } catch (err: any) {
        console.error('Search history API error:', err);
        setHistoryError('Could not fetch search history. ' + 
          (err.response?.status === 404 
            ? 'The search history endpoint is not available.' 
            : err.message || 'Unknown error'));
        
        // Don't show any data if there's an error
        setSearchHistory([]);
        setTotalPages(1);
      } finally {
        setHistoryLoading(false);
      }
    };
    
    fetchSearchHistory();
  }, [currentPage, filter, recordsPerPage]);

  const renderTLDChart = () => {
    if (loading) {
      return (
        <div className="mt-4 flex justify-center py-8">
          <svg className="animate-spin h-8 w-8 text-primary-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </div>
      );
    }
    
    if (!stats?.common_tlds) {
      return (
        <div className="mt-4 py-8 text-center text-gray-500">
          No TLD data available
        </div>
      );
    }
    
    // Sort TLDs by count (descending)
    const sortedTLDs = Object.entries(stats.common_tlds)
      .sort(([, countA], [, countB]) => countB - countA)
      .slice(0, 10); // Take top 10
    
    if (sortedTLDs.length === 0) {
      return (
        <div className="mt-4 py-8 text-center text-gray-500">
          No TLD data available
        </div>
      );
    }
    
    const maxCount = Math.max(...sortedTLDs.map(([, count]) => count));
    
    return (
      <div className="mt-4">
        <h3 className="text-lg font-medium text-gray-900 mb-2">Top 10 TLDs in Analyzed URLs</h3>
        <div className="space-y-2">
          {sortedTLDs.map(([tld, count]) => (
            <div key={tld} className="flex items-center">
              <div className="w-20 text-sm font-medium text-gray-700">.{tld}</div>
              <div className="flex-1 h-6 bg-gray-200 rounded-full overflow-hidden">
                <div 
                  className="h-full bg-primary-500 rounded-full"
                  style={{ width: `${(count / maxCount) * 100}%` }}
                />
              </div>
              <div className="w-12 text-right text-sm text-gray-700 ml-2">{count}</div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  // Modal component for displaying the detailed report
  const ReportModal = () => {
    if (!selectedRecord) return null;
    
    // Determine severity class based on phishing status
    const getSeverityClass = () => {
      if (selectedRecord.is_phishing) {
        return {
          bg: 'bg-white',
          border: 'border-danger-500/50',
          heading: 'text-danger-600',
          text: 'text-danger-500',
          icon: 'text-danger-500',
          progressBar: 'bg-danger-500',
          lightBg: 'bg-danger-100'
        };
      } else {
        return {
          bg: 'bg-white',
          border: 'border-success-500/50',
          heading: 'text-success-600',
          text: 'text-success-500',
          icon: 'text-success-500',
          progressBar: 'bg-success-500',
          lightBg: 'bg-success-100'
        };
      }
    };
    
    const severityClass = getSeverityClass();
    
    // Extract domain features if available
    const domainFeatures = selectedRecord.report?.features?.domain ? {
      domain: selectedRecord.report.features.domain,
      subdomain: selectedRecord.report.features.subdomain || '',
      domainName: selectedRecord.report.features.domainName || '',
      tld: selectedRecord.report.features.tld || '',
      usesHttps: selectedRecord.report.features.usesHttps || false,
      containsHyphens: selectedRecord.report.features.containsHyphens || false,
      containsNumbers: selectedRecord.report.features.containsNumbers || false,
      suspiciousTld: selectedRecord.report.features.suspiciousTld || false
    } : null;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50">
        <div className={`${severityClass.bg} rounded-lg shadow-md overflow-hidden border ${severityClass.border} max-w-4xl w-full max-h-[90vh] overflow-y-auto`}>
          {/* Header */}
          <div className="px-6 py-4 border-b border-gray-200 flex items-center justify-between">
            <div className="flex items-center">
              {selectedRecord.is_phishing ? (
                <FaExclamationTriangle className={`h-6 w-6 ${severityClass.icon} mr-3`} />
              ) : (
                <FaShieldAlt className={`h-6 w-6 ${severityClass.icon} mr-3`} />
              )}
              <h2 className={`text-xl font-bold ${severityClass.heading}`}>
                {selectedRecord.is_phishing ? 'Phishing URL Detected' : 'Legitimate URL'}
              </h2>
            </div>
            <div className="flex items-center">
              <div className="text-right mr-4">
                <span className={`text-sm font-medium ${severityClass.text}`}>Confidence:</span>
                <div className="w-32 h-4 bg-gray-200 rounded-full mt-1 overflow-hidden">
                  <div 
                    className={`h-full ${severityClass.progressBar}`} 
                    style={{ width: `${Math.min(selectedRecord.score || 0, 100)}%` }}
                  ></div>
                </div>
                <span className={`text-xs ${severityClass.text} font-semibold`}>{Math.min(Math.round(selectedRecord.score || 0), 100)}%</span>
              </div>
              <button 
                onClick={() => setShowReportModal(false)}
                className="text-gray-600 hover:text-gray-800 focus:outline-none"
              >
                <span className="sr-only">Close</span>
                <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>
          
          <div className="px-6 py-4">
            {/* URL Card */}
            <div className="bg-gray-50 rounded-md p-3 border border-gray-200 mb-4 break-all shadow-sm">
              <div className="flex items-start">
                <div className="mt-1">
                  {domainFeatures?.usesHttps ? (
                    <FaLock className="h-4 w-4 text-success-500 mr-2" />
                  ) : (
                    <FaUnlock className="h-4 w-4 text-danger-500 mr-2" />
                  )}
                </div>
                <div>
                  <p className="text-gray-500 text-sm mb-1">URL</p>
                  <p className="text-gray-800 font-medium">{selectedRecord.url}</p>
                  <p className="text-xs text-gray-500 mt-1">
                    Analyzed on {new Date(selectedRecord.timestamp).toLocaleString()}
                  </p>
                </div>
              </div>
            </div>

            {/* Verdict Summary */}
            <div className={`p-4 ${severityClass.lightBg} rounded-md mb-4 border border-gray-200`}>
              <p className={`font-medium ${severityClass.heading}`}>
                {selectedRecord.is_phishing
                  ? `This URL has been classified as a phishing site with ${Math.min(Math.round(selectedRecord.score || 0), 100)}% probability.`
                  : `This URL appears to be legitimate with ${Math.min(Math.round((100 - (selectedRecord.score || 0))), 100)}% probability.`}
              </p>
            </div>

            {/* Domain Analysis - if available */}
            {domainFeatures && (
              <div className="mb-6">
                <h3 className="text-lg font-medium text-gray-800 mb-3 flex items-center">
                  <FaGlobe className="mr-2 text-primary-500" /> Domain Structure
                </h3>
                <div className="grid grid-cols-2 gap-3">
                  <div className="bg-gray-50 p-3 rounded border border-gray-200 shadow-sm">
                    <p className="text-sm text-gray-500">Full Domain</p>
                    <p className="font-medium text-gray-800">{domainFeatures.domain}</p>
                  </div>
                  <div className="bg-gray-50 p-3 rounded border border-gray-200 shadow-sm">
                    <p className="text-sm text-gray-500">Subdomain</p>
                    <p className="font-medium text-gray-800">{domainFeatures.subdomain || '(none)'}</p>
                  </div>
                  <div className="bg-gray-50 p-3 rounded border border-gray-200 shadow-sm">
                    <p className="text-sm text-gray-500">Domain Name</p>
                    <p className="font-medium text-gray-800">{domainFeatures.domainName}</p>
                  </div>
                  <div className="bg-gray-50 p-3 rounded border border-gray-200 shadow-sm">
                    <p className="text-sm text-gray-500">TLD</p>
                    <p className="font-medium text-gray-800">.{domainFeatures.tld}</p>
                  </div>
                </div>
              </div>
            )}

            {/* Suspicious Elements */}
            <div className="mb-6">
              <h3 className="text-lg font-medium text-gray-800 mb-3 flex items-center">
                <FaExclamationTriangle className="mr-2 text-amber-500" /> Key Findings
              </h3>
              <ul className="space-y-2 bg-gray-50 p-4 rounded border border-gray-200 shadow-sm">
                {selectedRecord.report?.reasons && selectedRecord.report.reasons.length > 0 ? (
                  selectedRecord.report.reasons.map((reason: string, index: number) => (
                    <li key={index} className="flex items-start">
                      <FaExclamationTriangle className="h-5 w-5 text-amber-500 mr-2 mt-0.5" />
                      <span className="text-gray-700">{reason}</span>
                    </li>
                  ))
                ) : (
                  <li className="flex items-start">
                    <FaCheckCircle className="h-5 w-5 text-success-500 mr-2 mt-0.5" />
                    <span className="text-gray-700">No suspicious elements detected</span>
                  </li>
                )}
              </ul>
            </div>

            {/* URL Characteristics - if available */}
            {domainFeatures && (
              <div className="mb-6">
                <h3 className="text-lg font-medium text-gray-800 mb-3 flex items-center">
                  <FaLink className="mr-2 text-primary-500" /> URL Characteristics
                </h3>
                <div className="grid grid-cols-2 gap-3">
                  <div className="bg-gray-50 p-3 rounded border border-gray-200 flex items-center shadow-sm">
                    <div className={domainFeatures.usesHttps ? "text-success-500" : "text-danger-500"}>
                      {domainFeatures.usesHttps ? <FaLock className="h-5 w-5 mr-2" /> : <FaUnlock className="h-5 w-5 mr-2" />}
                    </div>
                    <div>
                      <p className="text-gray-700">
                        {domainFeatures.usesHttps ? "Uses HTTPS" : "Uses HTTP (Insecure)"}
                      </p>
                    </div>
                  </div>
                  <div className="bg-gray-50 p-3 rounded border border-gray-200 flex items-center shadow-sm">
                    <div className={domainFeatures.containsHyphens ? "text-amber-500" : "text-success-500"}>
                      <FaLink className="h-5 w-5 mr-2" />
                    </div>
                    <div>
                      <p className="text-gray-700">
                        {domainFeatures.containsHyphens ? "Contains hyphens" : "No hyphens"}
                      </p>
                    </div>
                  </div>
                  <div className="bg-gray-50 p-3 rounded border border-gray-200 flex items-center shadow-sm">
                    <div className={domainFeatures.containsNumbers ? "text-amber-500" : "text-success-500"}>
                      <FaLink className="h-5 w-5 mr-2" />
                    </div>
                    <div>
                      <p className="text-gray-700">
                        {domainFeatures.containsNumbers ? "Contains numbers" : "No numbers"}
                      </p>
                    </div>
                  </div>
                  <div className="bg-gray-50 p-3 rounded border border-gray-200 flex items-center shadow-sm">
                    <div className={domainFeatures.suspiciousTld ? "text-danger-500" : "text-success-500"}>
                      <FaGlobe className="h-5 w-5 mr-2" />
                    </div>
                    <div>
                      <p className="text-gray-700">
                        {domainFeatures.suspiciousTld ? `Unusual TLD (.${domainFeatures.tld})` : `Common TLD (.${domainFeatures.tld})`}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Technical Details */}
            {selectedRecord.report?.detailedAnalysis?.technicalDetails && (
              <div className="mb-6">
                <h3 className="text-lg font-medium text-gray-800 mb-3 flex items-center">
                  <FaShieldAlt className="mr-2 text-primary-500" /> Technical Details
                </h3>
                <div className="bg-gray-50 p-4 rounded border border-gray-200 shadow-sm">
                  <ul className="space-y-2">
                    {selectedRecord.report.detailedAnalysis.technicalDetails.map((detail: string, index: number) => (
                      <li key={index} className="text-gray-700 text-sm">• {detail}</li>
                    ))}
                  </ul>
                </div>
              </div>
            )}

            {/* Recommendation */}
            <div className={`p-4 rounded-md ${selectedRecord.is_phishing ? 'bg-danger-50 border border-danger-200' : 'bg-success-50 border border-success-200'} shadow-sm`}>
              <h3 className={`text-lg font-medium mb-2 ${selectedRecord.is_phishing ? 'text-danger-700' : 'text-success-700'} flex items-center`}>
                {selectedRecord.is_phishing ? <FaExclamationTriangle className="mr-2" /> : <FaShieldAlt className="mr-2" />}
                Recommendation
              </h3>
              <p className={`${selectedRecord.is_phishing ? 'text-danger-600' : 'text-success-600'}`}>
                {selectedRecord.is_phishing
                  ? "Do not visit this URL or enter any personal information. It appears to be a phishing site designed to steal sensitive information."
                  : "This URL appears to be legitimate. However, always be cautious when entering sensitive information online."}
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <Layout activePage="stats">
      <div className="max-w-7xl mx-auto px-4 py-12 sm:px-6 lg:px-8">
        <div className="text-center">
          <h1 className="text-3xl font-bold text-gray-900">
            Detection Statistics
          </h1>
          <p className="mt-3 max-w-2xl mx-auto text-lg text-gray-500">
            View statistics and insights from all URL analyses performed by our system.
          </p>
        </div>

        {loading && (
          <div className="mt-8">
            <Loading message="Loading statistics..." />
          </div>
        )}

        {error && (
          <div className="mt-6 p-4 bg-danger-100 text-danger-700 rounded-md">
            <div className="flex items-center">
              <FaExclamationTriangle className="mr-2 flex-shrink-0" />
              <div>
                <p>{error}</p>
              </div>
            </div>
          </div>
        )}

        {/* Modal for detailed report */}
        {showReportModal && <ReportModal />}

        {stats && !loading && (
          <div className="mt-10 max-w-7xl mx-auto">
            {/* Summary Cards */}
            <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
              <div className="bg-white overflow-hidden shadow rounded-lg">
                <div className="px-4 py-5 sm:p-6">
                  <div className="flex items-center">
                    <div className="flex-shrink-0 bg-primary-100 rounded-md p-3">
                      <FaGlobe className="h-6 w-6 text-primary-600" />
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dt className="text-sm font-medium text-gray-500 truncate">
                        Total URLs Analyzed
                      </dt>
                      <dd className="flex items-baseline">
                        <div className="text-2xl font-semibold text-gray-900">
                          {stats.total_urls_analyzed.toLocaleString()}
                        </div>
                      </dd>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-white overflow-hidden shadow rounded-lg">
                <div className="px-4 py-5 sm:p-6">
                  <div className="flex items-center">
                    <div className="flex-shrink-0 bg-danger-100 rounded-md p-3">
                      <FaExclamationTriangle className="h-6 w-6 text-danger-600" />
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dt className="text-sm font-medium text-gray-500 truncate">
                        Phishing URLs Detected
                      </dt>
                      <dd className="flex items-baseline">
                        <div className="text-2xl font-semibold text-gray-900">
                          {stats.total_phishing.toLocaleString()}
                        </div>
                        <div className="ml-2 text-sm font-medium text-danger-600">
                          {stats.phishing_percentage.toFixed(1)}%
                        </div>
                      </dd>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-white overflow-hidden shadow rounded-lg">
                <div className="px-4 py-5 sm:p-6">
                  <div className="flex items-center">
                    <div className="flex-shrink-0 bg-success-100 rounded-md p-3">
                      <FaGlobe className="h-6 w-6 text-success-600" />
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dt className="text-sm font-medium text-gray-500 truncate">
                        Legitimate URLs
                      </dt>
                      <dd className="flex items-baseline">
                        <div className="text-2xl font-semibold text-gray-900">
                          {stats.total_legitimate.toLocaleString()}
                        </div>
                        <div className="ml-2 text-sm font-medium text-success-600">
                          {stats.legitimate_percentage.toFixed(1)}%
                        </div>
                      </dd>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-white overflow-hidden shadow rounded-lg">
                <div className="px-4 py-5 sm:p-6">
                  <div className="flex items-center">
                    <div className="flex-shrink-0 bg-primary-100 rounded-md p-3">
                      <FaChartBar className="h-6 w-6 text-primary-600" />
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dt className="text-sm font-medium text-gray-500 truncate">
                        Detection Rate
                      </dt>
                      <dd className="flex items-baseline">
                        <div className="text-2xl font-semibold text-gray-900">
                          {(stats.phishing_percentage / 100).toLocaleString(undefined, {
                            style: 'percent',
                            minimumFractionDigits: 1,
                            maximumFractionDigits: 1,
                          })}
                        </div>
                      </dd>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Main Content - Two Cards Side by Side */}
            <div className="mt-8 grid grid-cols-1 lg:grid-cols-12 gap-8">
              {/* URL Search History Card - Left Side (Larger) */}
              <div className="lg:col-span-7 bg-white shadow rounded-lg overflow-hidden">
                <div className="px-6 py-5 border-b border-gray-200">
                  <div className="flex items-center justify-between">
                    <h2 className="text-xl font-bold text-gray-900">
                      <FaTable className="inline-block mr-2 mb-1" />
                      URL Search History
                    </h2>
                    <div className="flex items-center space-x-2">
                      <div className="relative inline-block text-left">
                        <select
                          className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm rounded-md"
                          value={filter}
                          onChange={(e) => {
                            setFilter(e.target.value);
                            setCurrentPage(1); // Reset to first page when filter changes
                          }}
                        >
                          <option value="all">All URLs</option>
                          <option value="phishing">Phishing Only</option>
                          <option value="safe">Safe Only</option>
                        </select>
                      </div>
                    </div>
                  </div>
                </div>

                {historyLoading ? (
                  <div className="px-6 py-10 text-center">
                    <Loading message="Loading search history..." />
                  </div>
                ) : historyError ? (
                  <div className="px-6 py-4 text-danger-600">
                    <FaExclamationTriangle className="inline-block mr-2" />
                    {historyError}
                  </div>
                ) : (
                  <>
                    <div className="overflow-x-auto">
                      <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                          <tr>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-16">
                              ID
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/3">
                              URL
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-24">
                              Status
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-40">
                              <FaCalendarAlt className="inline-block mr-1" /> 
                              Date & Time
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-32">
                              Score
                            </th>
                            <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-24">
                              Report
                            </th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {searchHistory.length > 0 ? (
                            searchHistory.map((record) => (
                              <tr key={record.id} className="hover:bg-gray-50">
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                  #{record.id}
                                </td>
                                <td className="px-6 py-4">
                                  <div className="text-sm font-medium text-gray-900 truncate max-w-xs" title={record.url}>
                                    {record.url}
                                  </div>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                    record.is_phishing 
                                      ? 'bg-danger-100 text-danger-800' 
                                      : 'bg-success-100 text-success-800'
                                  }`}>
                                    {record.is_phishing ? 'Phishing' : 'Safe'}
                                  </span>
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                  {new Date(record.timestamp).toLocaleString()}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap">
                                  {record.score !== undefined && (
                                    <div className="flex items-center space-x-2">
                                      <div className="w-12 h-2.5 bg-gray-200 rounded-full overflow-hidden flex-shrink-0">
                                        <div 
                                          className={`h-2.5 rounded-full ${
                                            record.is_phishing ? 'bg-danger-600' : 'bg-success-600'
                                          }`}
                                          style={{ width: `${Math.min(record.score, 100)}%` }}
                                        ></div>
                                      </div>
                                      <span className="text-xs text-gray-500 flex-shrink-0">
                                        {Math.min(Math.round(record.score), 100)}%
                                      </span>
                                    </div>
                                  )}
                                </td>
                                <td className="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                                  <button
                                    onClick={() => {
                                      setSelectedRecord(record);
                                      setShowReportModal(true);
                                    }}
                                    className="text-primary-600 hover:text-primary-900 bg-primary-50 px-3 py-1 rounded-md"
                                  >
                                    View
                                  </button>
                                </td>
                              </tr>
                            ))
                          ) : (
                            <tr>
                              <td colSpan={6} className="px-6 py-10 text-center text-sm text-gray-500">
                                No URL history found. Analyze a URL to see it appear here.
                              </td>
                            </tr>
                          )}
                        </tbody>
                      </table>
                    </div>
                    
                    {/* Pagination */}
                    {totalPages > 1 && (
                      <div className="px-6 py-3 flex items-center justify-between border-t border-gray-200">
                        <div className="flex-1 flex items-center justify-between">
                          <div>
                            <p className="text-sm text-gray-700">
                              Showing <span className="font-medium">{((currentPage - 1) * recordsPerPage) + 1}</span> to{' '}
                              <span className="font-medium">
                                {Math.min(currentPage * recordsPerPage, searchHistory.length)}
                              </span>{' '}
                              of <span className="font-medium">{searchHistory.length}</span> results
                            </p>
                          </div>
                          <div className="overflow-x-auto">
                            <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                              <button
                                onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                                disabled={currentPage === 1}
                                className={`relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium ${
                                  currentPage === 1 
                                    ? 'text-gray-300 cursor-not-allowed' 
                                    : 'text-gray-500 hover:bg-gray-50'
                                }`}
                              >
                                <span className="sr-only">Previous</span>
                                &larr;
                              </button>
                              
                              {(() => {
                                // Logic to show limited page numbers
                                let pages: (number | string)[] = [];
                                const maxPageButtons = 5; // Show max 5 page buttons at once
                                
                                if (totalPages <= maxPageButtons) {
                                  // If total pages are less than max buttons, show all pages
                                  pages = Array.from({ length: totalPages }, (_, i) => i + 1);
                                } else {
                                  // Always include first and last page
                                  // And pages around current page
                                  const startPage = Math.max(1, currentPage - Math.floor(maxPageButtons / 2));
                                  const endPage = Math.min(totalPages, startPage + maxPageButtons - 1);
                                  
                                  pages = Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage + i);
                                  
                                  // Add ellipsis if needed
                                  if (startPage > 1) {
                                    pages.unshift(1);
                                    if (startPage > 2) pages.splice(1, 0, "ellipsis-1"); 
                                  }
                                  
                                  if (endPage < totalPages) {
                                    if (endPage < totalPages - 1) pages.push("ellipsis-2");
                                    pages.push(totalPages);
                                  }
                                }
                                
                                return pages.map((page, index) => {
                                  if (typeof page === 'string' && page.startsWith('ellipsis')) {
                                    return (
                                      <span key={page} className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                                        ...
                                      </span>
                                    );
                                  }
                                  
                                  return (
                                    <button
                                      key={index}
                                      onClick={() => setCurrentPage(page as number)}
                                      className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                                        currentPage === page
                                          ? 'z-10 bg-primary-50 border-primary-500 text-primary-600'
                                          : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                                      }`}
                                    >
                                      {page}
                                    </button>
                                  );
                                });
                              })()}
                              
                              <button
                                onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                                disabled={currentPage === totalPages}
                                className={`relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium ${
                                  currentPage === totalPages 
                                    ? 'text-gray-300 cursor-not-allowed' 
                                    : 'text-gray-500 hover:bg-gray-50'
                                }`}
                              >
                                <span className="sr-only">Next</span>
                                &rarr;
                              </button>
                            </nav>
                          </div>
                        </div>
                      </div>
                    )}
                  </>
                )}
              </div>

              {/* URL Analysis Breakdown Card - Right Side (Smaller) */}
              <div className="lg:col-span-5 bg-white shadow rounded-lg p-6">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-xl font-bold text-gray-900">URL Analysis Breakdown</h2>
                  <button 
                    onClick={fetchLatestStatistics} 
                    className="px-3 py-1 bg-primary-100 text-primary-600 rounded hover:bg-primary-200 flex items-center"
                    disabled={loading}
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className={`h-4 w-4 mr-1 ${loading ? 'animate-spin' : ''}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    {loading ? 'Refreshing...' : 'Refresh'}
                  </button>
                </div>
                
                <div className="flex justify-center mb-6">
                  <div className="relative h-64 w-64">
                    {/* Simple pie chart visualization */}
                    {loading ? (
                      <div className="absolute inset-0 flex items-center justify-center">
                        <svg className="animate-spin h-12 w-12 text-primary-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                      </div>
                    ) : stats ? (
                      <div className="absolute inset-0 flex items-center justify-center">
                        <svg viewBox="0 0 36 36" className="h-full w-full">
                          <circle 
                            cx="18" 
                            cy="18" 
                            r="15.91549430918954" 
                            fill="transparent" 
                            stroke="#d1d5db" 
                            strokeWidth="3" 
                          />
                          <circle 
                            cx="18" 
                            cy="18" 
                            r="15.91549430918954" 
                            fill="transparent" 
                            stroke="#ef4444" 
                            strokeWidth="3" 
                            strokeDasharray={`${stats.phishing_percentage} ${100 - stats.phishing_percentage}`}
                            strokeDashoffset="25" 
                          />
                        </svg>
                        <div className="absolute flex flex-col items-center justify-center">
                          <span className="text-3xl font-bold">{stats.phishing_percentage.toFixed(1)}%</span>
                          <span className="text-sm text-gray-500">Phishing</span>
                        </div>
                      </div>
                    ) : (
                      <div className="absolute inset-0 flex items-center justify-center">
                        <p className="text-gray-500">No data available</p>
                      </div>
                    )}
                  </div>
                </div>
                
                <div className="space-y-6">
                  {renderTLDChart()}
                  
                  <div>
                    <h3 className="text-lg font-medium text-gray-900 mb-4">Recent Detections</h3>
                    {loading ? (
                      <div className="py-4 text-center text-gray-500">
                        <svg className="animate-spin h-6 w-6 mx-auto mb-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Loading latest detections...
                      </div>
                    ) : stats.recent_detections && stats.recent_detections.length > 0 ? (
                      <ul className="divide-y divide-gray-200">
                        {stats.recent_detections.slice(0, 5).map((detection, index) => (
                          <li key={index} className="py-3">
                            <div className="flex items-center">
                              <div className={`w-2 h-2 rounded-full mr-3 ${detection.is_phishing ? 'bg-danger-500' : 'bg-success-500'}`}></div>
                              <div className="flex-1 truncate">
                                <p className="text-sm font-medium text-gray-900 truncate">{detection.url}</p>
                                <p className="text-xs text-gray-500">
                                  {new Date(detection.timestamp).toLocaleString()}
                                </p>
                              </div>
                              <div className={`px-2 py-1 text-xs rounded-full ${detection.is_phishing ? 'bg-danger-100 text-danger-800' : 'bg-success-100 text-success-800'}`}>
                                {detection.is_phishing ? 'Phishing' : 'Safe'}
                              </div>
                            </div>
                          </li>
                        ))}
                      </ul>
                    ) : (
                      <p className="text-gray-500">No recent detections found.</p>
                    )}
                  </div>
                </div>
              </div>
            </div>
          </div>
                              </td>
                              <td className="px-6 py-4">
                                <div className="text-sm font-medium text-gray-900 truncate max-w-xs" title={record.url}>
                                  {record.url}
                                </div>
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap">
                                <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                  record.is_phishing 
                                    ? 'bg-danger-100 text-danger-800' 
                                    : 'bg-success-100 text-success-800'
                                }`}>
                                  {record.is_phishing ? 'Phishing' : 'Safe'}
                                </span>
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {new Date(record.timestamp).toLocaleString()}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap">
                                {record.score !== undefined && (
                                  <div className="flex items-center space-x-2">
                                    <div className="w-12 h-2.5 bg-gray-200 rounded-full overflow-hidden flex-shrink-0">
                                      <div 
                                        className={`h-2.5 rounded-full ${
                                          record.is_phishing ? 'bg-danger-600' : 'bg-success-600'
                                        }`}
                                        style={{ width: `${Math.min(record.score, 100)}%` }}
                                      ></div>
                                    </div>
                                    <span className="text-xs text-gray-500 flex-shrink-0">
                                      {Math.min(Math.round(record.score), 100)}%
                                    </span>
                                  </div>
                                )}
                              </td>
                              <td className="px-6 py-4 whitespace-nowrap text-center text-sm font-medium">
                                <button
                                  onClick={() => {
                                    setSelectedRecord(record);
                                    setShowReportModal(true);
                                  }}
                                  className="text-primary-600 hover:text-primary-900 bg-primary-50 px-3 py-1 rounded-md"
                                >
                                  View
                                </button>
                              </td>
                            </tr>
                          ))
                        ) : (
                          <tr>
                            <td colSpan={6} className="px-6 py-10 text-center text-sm text-gray-500">
                              No URL history found. Analyze a URL to see it appear here.
                            </td>
                          </tr>
                        )}
                      </tbody>
                    </table>
                  </div>
                  
                  {/* Pagination */}
                  {totalPages > 1 && (
                    <div className="px-6 py-3 flex items-center justify-between border-t border-gray-200">
                      <div className="flex-1 flex items-center justify-between">
                        <div>
                          <p className="text-sm text-gray-700">
                            Showing <span className="font-medium">{((currentPage - 1) * recordsPerPage) + 1}</span> to{' '}
                            <span className="font-medium">
                              {Math.min(currentPage * recordsPerPage, searchHistory.length)}
                            </span>{' '}
                            of <span className="font-medium">{searchHistory.length}</span> results
                          </p>
                        </div>
                        <div className="overflow-x-auto">
                          <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                            <button
                              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                              disabled={currentPage === 1}
                              className={`relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium ${
                                currentPage === 1 
                                  ? 'text-gray-300 cursor-not-allowed' 
                                  : 'text-gray-500 hover:bg-gray-50'
                              }`}
                            >
                              <span className="sr-only">Previous</span>
                              &larr;
                            </button>
                            
                            {/* Show limited page numbers to prevent overflow */}
                            {(() => {
                              // Logic to show limited page numbers
                              let pages: (number | string)[] = [];
                              const maxPageButtons = 5; // Show max 5 page buttons at once
                              
                              if (totalPages <= maxPageButtons) {
                                // If total pages are less than max buttons, show all pages
                                pages = Array.from({ length: totalPages }, (_, i) => i + 1);
                              } else {
                                // Always include first and last page
                                // And pages around current page
                                const startPage = Math.max(1, currentPage - Math.floor(maxPageButtons / 2));
                                const endPage = Math.min(totalPages, startPage + maxPageButtons - 1);
                                
                                pages = Array.from({ length: endPage - startPage + 1 }, (_, i) => startPage + i);
                                
                                // Add ellipsis if needed
                                if (startPage > 1) {
                                  pages.unshift(1);
                                  if (startPage > 2) pages.splice(1, 0, "ellipsis-1"); 
                                }
                                
                                if (endPage < totalPages) {
                                  if (endPage < totalPages - 1) pages.push("ellipsis-2");
                                  pages.push(totalPages);
                                }
                              }
                              
                              return pages.map((page, index) => {
                                if (typeof page === 'string' && page.startsWith('ellipsis')) {
                                  return (
                                    <span key={page} className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                                      ...
                                    </span>
                                  );
                                }
                                
                                return (
                                  <button
                                    key={index}
                                    onClick={() => setCurrentPage(page as number)}
                                    className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                                      currentPage === page
                                        ? 'z-10 bg-primary-50 border-primary-500 text-primary-600'
                                        : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                                    }`}
                                  >
                                    {page}
                                  </button>
                                );
                              });
                            })()}
                            
                            <button
                              onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                              disabled={currentPage === totalPages}
                              className={`relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium ${
                                currentPage === totalPages 
                                  ? 'text-gray-300 cursor-not-allowed' 
                                  : 'text-gray-500 hover:bg-gray-50'
                              }`}
                            >
                              <span className="sr-only">Next</span>
                              &rarr;
                            </button>
                          </nav>
                        </div>
                      </div>
                    </div>
                  )}
                </>
              )}
            </div>
          </div>
        )}
      </div>
    </Layout>
  );
};

export default StatisticsPage;